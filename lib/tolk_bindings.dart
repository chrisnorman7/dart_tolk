// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for the Tolk screen reader library
class DartTolk {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartTolk(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartTolk.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<wchar_t> _Expression,
    ffi.Pointer<wchar_t> _FunctionName,
    ffi.Pointer<wchar_t> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, ffi.Uint32, uintptr_t)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<ffi.Int32> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>('_errno');
  late final __errno =
      __errnoPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int32)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int32>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Uint64> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function()>>(
          '__doserrno');
  late final ___doserrno =
      ___doserrnoPtr.asFunction<ffi.Pointer<ffi.Uint64> Function()>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Uint64)>>(
          '_set_doserrno');
  late final __set_doserrno = __set_doserrnoPtr.asFunction<int Function(int)>();

  int _get_doserrno(
    ffi.Pointer<ffi.Uint64> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Uint64>)>>(
          '_get_doserrno');
  late final __get_doserrno =
      __get_doserrnoPtr.asFunction<int Function(ffi.Pointer<ffi.Uint64>)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> _Buf,
    int _Val,
    int _MaxCount,
  ) {
    return _memchr(
      _Buf,
      _Val,
      _MaxCount,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memcmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memcpy(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memmove(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, size_t)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> _Dst,
    int _Val,
    int _Size,
  ) {
    return _memset(
      _Dst,
      _Val,
      _Size,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Val,
  ) {
    return _strchr(
      _Str,
      _Val,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Ch,
  ) {
    return _strrchr(
      _Str,
      _Ch,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _SubStr,
  ) {
    return _strstr(
      _Str,
      _SubStr,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Uint16> wcschr(
    ffi.Pointer<wchar_t> _Str,
    int _Ch,
  ) {
    return _wcschr(
      _Str,
      _Ch,
    );
  }

  late final _wcschrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('wcschr');
  late final _wcschr = _wcschrPtr.asFunction<
      ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsrchr(
    ffi.Pointer<wchar_t> _Str,
    int _Ch,
  ) {
    return _wcsrchr(
      _Str,
      _Ch,
    );
  }

  late final _wcsrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('wcsrchr');
  late final _wcsrchr = _wcsrchrPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsstr(
    ffi.Pointer<wchar_t> _Str,
    ffi.Pointer<wchar_t> _SubStr,
  ) {
    return _wcsstr(
      _Str,
      _SubStr,
    );
  }

  late final _wcsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsstr');
  late final _wcsstr = _wcsstrPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _cgetws_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<size_t> _SizeRead,
  ) {
    return __cgetws_s(
      _Buffer,
      _BufferCount,
      _SizeRead,
    );
  }

  late final __cgetws_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, ffi.Pointer<size_t>)>>('_cgetws_s');
  late final __cgetws_s = __cgetws_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<size_t>)>();

  int _cputws(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return __cputws(
      _Buffer,
    );
  }

  late final __cputwsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_cputws');
  late final __cputws =
      __cputwsPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _getwch() {
    return __getwch();
  }

  late final __getwchPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_getwch');
  late final __getwch = __getwchPtr.asFunction<int Function()>();

  int _getwche() {
    return __getwche();
  }

  late final __getwchePtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_getwche');
  late final __getwche = __getwchePtr.asFunction<int Function()>();

  int _putwch(
    int _Character,
  ) {
    return __putwch(
      _Character,
    );
  }

  late final __putwchPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('_putwch');
  late final __putwch = __putwchPtr.asFunction<int Function(int)>();

  int _ungetwch(
    int _Character,
  ) {
    return __ungetwch(
      _Character,
    );
  }

  late final __ungetwchPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('_ungetwch');
  late final __ungetwch = __ungetwchPtr.asFunction<int Function(int)>();

  int _getwch_nolock() {
    return __getwch_nolock();
  }

  late final __getwch_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_getwch_nolock');
  late final __getwch_nolock = __getwch_nolockPtr.asFunction<int Function()>();

  int _getwche_nolock() {
    return __getwche_nolock();
  }

  late final __getwche_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_getwche_nolock');
  late final __getwche_nolock =
      __getwche_nolockPtr.asFunction<int Function()>();

  int _putwch_nolock(
    int _Character,
  ) {
    return __putwch_nolock(
      _Character,
    );
  }

  late final __putwch_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('_putwch_nolock');
  late final __putwch_nolock =
      __putwch_nolockPtr.asFunction<int Function(int)>();

  int _ungetwch_nolock(
    int _Character,
  ) {
    return __ungetwch_nolock(
      _Character,
    );
  }

  late final __ungetwch_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('_ungetwch_nolock');
  late final __ungetwch_nolock =
      __ungetwch_nolockPtr.asFunction<int Function(int)>();

  int __conio_common_vcwprintf(
    int _Options,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___conio_common_vcwprintf(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>>('__conio_common_vcwprintf');
  late final ___conio_common_vcwprintf =
      ___conio_common_vcwprintfPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  int __conio_common_vcwprintf_s(
    int _Options,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___conio_common_vcwprintf_s(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>>('__conio_common_vcwprintf_s');
  late final ___conio_common_vcwprintf_s =
      ___conio_common_vcwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  int __conio_common_vcwprintf_p(
    int _Options,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___conio_common_vcwprintf_p(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>>('__conio_common_vcwprintf_p');
  late final ___conio_common_vcwprintf_p =
      ___conio_common_vcwprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  int __conio_common_vcwscanf(
    int _Options,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___conio_common_vcwscanf(
      _Options,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___conio_common_vcwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>>('__conio_common_vcwscanf');
  late final ___conio_common_vcwscanf = ___conio_common_vcwscanfPtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  ffi.Pointer<ffi.Uint16> __pctype_func() {
    return ___pctype_func();
  }

  late final ___pctype_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function()>>(
          '__pctype_func');
  late final ___pctype_func =
      ___pctype_funcPtr.asFunction<ffi.Pointer<ffi.Uint16> Function()>();

  ffi.Pointer<wctype_t> __pwctype_func() {
    return ___pwctype_func();
  }

  late final ___pwctype_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wctype_t> Function()>>(
          '__pwctype_func');
  late final ___pwctype_func =
      ___pwctype_funcPtr.asFunction<ffi.Pointer<wctype_t> Function()>();

  int iswalnum(
    int _C,
  ) {
    return _iswalnum(
      _C,
    );
  }

  late final _iswalnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswalnum');
  late final _iswalnum = _iswalnumPtr.asFunction<int Function(int)>();

  int iswalpha(
    int _C,
  ) {
    return _iswalpha(
      _C,
    );
  }

  late final _iswalphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswalpha');
  late final _iswalpha = _iswalphaPtr.asFunction<int Function(int)>();

  int iswascii(
    int _C,
  ) {
    return _iswascii(
      _C,
    );
  }

  late final _iswasciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswascii');
  late final _iswascii = _iswasciiPtr.asFunction<int Function(int)>();

  int iswblank(
    int _C,
  ) {
    return _iswblank(
      _C,
    );
  }

  late final _iswblankPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswblank');
  late final _iswblank = _iswblankPtr.asFunction<int Function(int)>();

  int iswcntrl(
    int _C,
  ) {
    return _iswcntrl(
      _C,
    );
  }

  late final _iswcntrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswcntrl');
  late final _iswcntrl = _iswcntrlPtr.asFunction<int Function(int)>();

  int iswdigit(
    int _C,
  ) {
    return _iswdigit(
      _C,
    );
  }

  late final _iswdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswdigit');
  late final _iswdigit = _iswdigitPtr.asFunction<int Function(int)>();

  int iswgraph(
    int _C,
  ) {
    return _iswgraph(
      _C,
    );
  }

  late final _iswgraphPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswgraph');
  late final _iswgraph = _iswgraphPtr.asFunction<int Function(int)>();

  int iswlower(
    int _C,
  ) {
    return _iswlower(
      _C,
    );
  }

  late final _iswlowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswlower');
  late final _iswlower = _iswlowerPtr.asFunction<int Function(int)>();

  int iswprint(
    int _C,
  ) {
    return _iswprint(
      _C,
    );
  }

  late final _iswprintPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswprint');
  late final _iswprint = _iswprintPtr.asFunction<int Function(int)>();

  int iswpunct(
    int _C,
  ) {
    return _iswpunct(
      _C,
    );
  }

  late final _iswpunctPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswpunct');
  late final _iswpunct = _iswpunctPtr.asFunction<int Function(int)>();

  int iswspace(
    int _C,
  ) {
    return _iswspace(
      _C,
    );
  }

  late final _iswspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswspace');
  late final _iswspace = _iswspacePtr.asFunction<int Function(int)>();

  int iswupper(
    int _C,
  ) {
    return _iswupper(
      _C,
    );
  }

  late final _iswupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswupper');
  late final _iswupper = _iswupperPtr.asFunction<int Function(int)>();

  int iswxdigit(
    int _C,
  ) {
    return _iswxdigit(
      _C,
    );
  }

  late final _iswxdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswxdigit');
  late final _iswxdigit = _iswxdigitPtr.asFunction<int Function(int)>();

  int __iswcsymf(
    int _C,
  ) {
    return ___iswcsymf(
      _C,
    );
  }

  late final ___iswcsymfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('__iswcsymf');
  late final ___iswcsymf = ___iswcsymfPtr.asFunction<int Function(int)>();

  int __iswcsym(
    int _C,
  ) {
    return ___iswcsym(
      _C,
    );
  }

  late final ___iswcsymPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('__iswcsym');
  late final ___iswcsym = ___iswcsymPtr.asFunction<int Function(int)>();

  int _iswalnum_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswalnum_l(
      _C,
      _Locale,
    );
  }

  late final __iswalnum_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswalnum_l');
  late final __iswalnum_l =
      __iswalnum_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswalpha_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswalpha_l(
      _C,
      _Locale,
    );
  }

  late final __iswalpha_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswalpha_l');
  late final __iswalpha_l =
      __iswalpha_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswblank_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswblank_l(
      _C,
      _Locale,
    );
  }

  late final __iswblank_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswblank_l');
  late final __iswblank_l =
      __iswblank_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswcntrl_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswcntrl_l(
      _C,
      _Locale,
    );
  }

  late final __iswcntrl_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswcntrl_l');
  late final __iswcntrl_l =
      __iswcntrl_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswdigit_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswdigit_l(
      _C,
      _Locale,
    );
  }

  late final __iswdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswdigit_l');
  late final __iswdigit_l =
      __iswdigit_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswgraph_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswgraph_l(
      _C,
      _Locale,
    );
  }

  late final __iswgraph_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswgraph_l');
  late final __iswgraph_l =
      __iswgraph_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswlower_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswlower_l(
      _C,
      _Locale,
    );
  }

  late final __iswlower_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswlower_l');
  late final __iswlower_l =
      __iswlower_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswprint_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswprint_l(
      _C,
      _Locale,
    );
  }

  late final __iswprint_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswprint_l');
  late final __iswprint_l =
      __iswprint_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswpunct_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswpunct_l(
      _C,
      _Locale,
    );
  }

  late final __iswpunct_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswpunct_l');
  late final __iswpunct_l =
      __iswpunct_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswspace_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswspace_l(
      _C,
      _Locale,
    );
  }

  late final __iswspace_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswspace_l');
  late final __iswspace_l =
      __iswspace_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswupper_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswupper_l(
      _C,
      _Locale,
    );
  }

  late final __iswupper_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswupper_l');
  late final __iswupper_l =
      __iswupper_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswxdigit_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswxdigit_l(
      _C,
      _Locale,
    );
  }

  late final __iswxdigit_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswxdigit_l');
  late final __iswxdigit_l =
      __iswxdigit_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswcsymf_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswcsymf_l(
      _C,
      _Locale,
    );
  }

  late final __iswcsymf_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswcsymf_l');
  late final __iswcsymf_l =
      __iswcsymf_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswcsym_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __iswcsym_l(
      _C,
      _Locale,
    );
  }

  late final __iswcsym_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, _locale_t)>>(
          '_iswcsym_l');
  late final __iswcsym_l =
      __iswcsym_lPtr.asFunction<int Function(int, _locale_t)>();

  int towupper(
    int _C,
  ) {
    return _towupper(
      _C,
    );
  }

  late final _towupperPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('towupper');
  late final _towupper = _towupperPtr.asFunction<int Function(int)>();

  int towlower(
    int _C,
  ) {
    return _towlower(
      _C,
    );
  }

  late final _towlowerPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('towlower');
  late final _towlower = _towlowerPtr.asFunction<int Function(int)>();

  int iswctype(
    int _C,
    int _Type,
  ) {
    return _iswctype(
      _C,
      _Type,
    );
  }

  late final _iswctypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, wctype_t)>>(
          'iswctype');
  late final _iswctype = _iswctypePtr.asFunction<int Function(int, int)>();

  int _towupper_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __towupper_l(
      _C,
      _Locale,
    );
  }

  late final __towupper_lPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, _locale_t)>>(
          '_towupper_l');
  late final __towupper_l =
      __towupper_lPtr.asFunction<int Function(int, _locale_t)>();

  int _towlower_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __towlower_l(
      _C,
      _Locale,
    );
  }

  late final __towlower_lPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, _locale_t)>>(
          '_towlower_l');
  late final __towlower_l =
      __towlower_lPtr.asFunction<int Function(int, _locale_t)>();

  int _iswctype_l(
    int _C,
    int _Type,
    _locale_t _Locale,
  ) {
    return __iswctype_l(
      _C,
      _Type,
      _Locale,
    );
  }

  late final __iswctype_lPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, wctype_t, _locale_t)>>(
      '_iswctype_l');
  late final __iswctype_l =
      __iswctype_lPtr.asFunction<int Function(int, int, _locale_t)>();

  int isleadbyte(
    int _C,
  ) {
    return _isleadbyte(
      _C,
    );
  }

  late final _isleadbytePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isleadbyte');
  late final _isleadbyte = _isleadbytePtr.asFunction<int Function(int)>();

  int _isleadbyte_l(
    int _C,
    _locale_t _Locale,
  ) {
    return __isleadbyte_l(
      _C,
      _Locale,
    );
  }

  late final __isleadbyte_lPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, _locale_t)>>(
          '_isleadbyte_l');
  late final __isleadbyte_l =
      __isleadbyte_lPtr.asFunction<int Function(int, _locale_t)>();

  int is_wctype(
    int _C,
    int _Type,
  ) {
    return _is_wctype(
      _C,
      _Type,
    );
  }

  late final _is_wctypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, wctype_t)>>(
          'is_wctype');
  late final _is_wctype = _is_wctypePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<wchar_t> _wgetcwd(
    ffi.Pointer<wchar_t> _DstBuf,
    int _SizeInWords,
  ) {
    return __wgetcwd(
      _DstBuf,
      _SizeInWords,
    );
  }

  late final __wgetcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Int32)>>('_wgetcwd');
  late final __wgetcwd = __wgetcwdPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wgetdcwd(
    int _Drive,
    ffi.Pointer<wchar_t> _DstBuf,
    int _SizeInWords,
  ) {
    return __wgetdcwd(
      _Drive,
      _DstBuf,
      _SizeInWords,
    );
  }

  late final __wgetdcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int32, ffi.Pointer<wchar_t>, ffi.Int32)>>('_wgetdcwd');
  late final __wgetdcwd = __wgetdcwdPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int _wchdir(
    ffi.Pointer<wchar_t> _Path,
  ) {
    return __wchdir(
      _Path,
    );
  }

  late final __wchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wchdir');
  late final __wchdir =
      __wchdirPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wmkdir(
    ffi.Pointer<wchar_t> _Path,
  ) {
    return __wmkdir(
      _Path,
    );
  }

  late final __wmkdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wmkdir');
  late final __wmkdir =
      __wmkdirPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wrmdir(
    ffi.Pointer<wchar_t> _Path,
  ) {
    return __wrmdir(
      _Path,
    );
  }

  late final __wrmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wrmdir');
  late final __wrmdir =
      __wrmdirPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _waccess(
    ffi.Pointer<wchar_t> _FileName,
    int _AccessMode,
  ) {
    return __waccess(
      _FileName,
      _AccessMode,
    );
  }

  late final __waccessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Int32)>>('_waccess');
  late final __waccess =
      __waccessPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  int _waccess_s(
    ffi.Pointer<wchar_t> _FileName,
    int _AccessMode,
  ) {
    return __waccess_s(
      _FileName,
      _AccessMode,
    );
  }

  late final __waccess_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, ffi.Int32)>>('_waccess_s');
  late final __waccess_s =
      __waccess_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  int _wchmod(
    ffi.Pointer<wchar_t> _FileName,
    int _Mode,
  ) {
    return __wchmod(
      _FileName,
      _Mode,
    );
  }

  late final __wchmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Int32)>>('_wchmod');
  late final __wchmod =
      __wchmodPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  int _wcreat(
    ffi.Pointer<wchar_t> _FileName,
    int _PermissionMode,
  ) {
    return __wcreat(
      _FileName,
      _PermissionMode,
    );
  }

  late final __wcreatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Int32)>>('_wcreat');
  late final __wcreat =
      __wcreatPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  int _wfindfirst32(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_wfinddata32_t> _FindData,
  ) {
    return __wfindfirst32(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<_wfinddata32_t>)>>('_wfindfirst32');
  late final __wfindfirst32 = __wfindfirst32Ptr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_wfinddata32_t>)>();

  int _wfindnext32(
    int _FindHandle,
    ffi.Pointer<_wfinddata32_t> _FindData,
  ) {
    return __wfindnext32(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.IntPtr, ffi.Pointer<_wfinddata32_t>)>>('_wfindnext32');
  late final __wfindnext32 = __wfindnext32Ptr
      .asFunction<int Function(int, ffi.Pointer<_wfinddata32_t>)>();

  int _wunlink(
    ffi.Pointer<wchar_t> _FileName,
  ) {
    return __wunlink(
      _FileName,
    );
  }

  late final __wunlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wunlink');
  late final __wunlink =
      __wunlinkPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wrename(
    ffi.Pointer<wchar_t> _OldFileName,
    ffi.Pointer<wchar_t> _NewFileName,
  ) {
    return __wrename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final __wrenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wrename');
  late final __wrename = __wrenamePtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wmktemp_s(
    ffi.Pointer<wchar_t> _TemplateName,
    int _SizeInWords,
  ) {
    return __wmktemp_s(
      _TemplateName,
      _SizeInWords,
    );
  }

  late final __wmktemp_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wmktemp_s');
  late final __wmktemp_s =
      __wmktemp_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wmktemp(
    ffi.Pointer<wchar_t> _TemplateName,
  ) {
    return __wmktemp(
      _TemplateName,
    );
  }

  late final __wmktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wmktemp');
  late final __wmktemp = __wmktempPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _wfindfirst32i64(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_wfinddata32i64_t> _FindData,
  ) {
    return __wfindfirst32i64(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst32i64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<_wfinddata32i64_t>)>>('_wfindfirst32i64');
  late final __wfindfirst32i64 = __wfindfirst32i64Ptr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_wfinddata32i64_t>)>();

  int _wfindfirst64i32(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_wfinddata64i32_t> _FindData,
  ) {
    return __wfindfirst64i32(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst64i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<_wfinddata64i32_t>)>>('_wfindfirst64i32');
  late final __wfindfirst64i32 = __wfindfirst64i32Ptr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_wfinddata64i32_t>)>();

  int _wfindfirst64(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_wfinddata64_t> _FindData,
  ) {
    return __wfindfirst64(
      _FileName,
      _FindData,
    );
  }

  late final __wfindfirst64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<_wfinddata64_t>)>>('_wfindfirst64');
  late final __wfindfirst64 = __wfindfirst64Ptr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_wfinddata64_t>)>();

  int _wfindnext32i64(
    int _FindHandle,
    ffi.Pointer<_wfinddata32i64_t> _FindData,
  ) {
    return __wfindnext32i64(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext32i64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.IntPtr, ffi.Pointer<_wfinddata32i64_t>)>>('_wfindnext32i64');
  late final __wfindnext32i64 = __wfindnext32i64Ptr
      .asFunction<int Function(int, ffi.Pointer<_wfinddata32i64_t>)>();

  int _wfindnext64i32(
    int _FindHandle,
    ffi.Pointer<_wfinddata64i32_t> _FindData,
  ) {
    return __wfindnext64i32(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext64i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.IntPtr, ffi.Pointer<_wfinddata64i32_t>)>>('_wfindnext64i32');
  late final __wfindnext64i32 = __wfindnext64i32Ptr
      .asFunction<int Function(int, ffi.Pointer<_wfinddata64i32_t>)>();

  int _wfindnext64(
    int _FindHandle,
    ffi.Pointer<_wfinddata64_t> _FindData,
  ) {
    return __wfindnext64(
      _FindHandle,
      _FindData,
    );
  }

  late final __wfindnext64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.IntPtr, ffi.Pointer<_wfinddata64_t>)>>('_wfindnext64');
  late final __wfindnext64 = __wfindnext64Ptr
      .asFunction<int Function(int, ffi.Pointer<_wfinddata64_t>)>();

  int _wsopen_s(
    ffi.Pointer<ffi.Int32> _FileHandle,
    ffi.Pointer<wchar_t> _FileName,
    int _OpenFlag,
    int _ShareFlag,
    int _PermissionFlag,
  ) {
    return __wsopen_s(
      _FileHandle,
      _FileName,
      _OpenFlag,
      _ShareFlag,
      _PermissionFlag,
    );
  }

  late final __wsopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<wchar_t>,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('_wsopen_s');
  late final __wsopen_s = __wsopen_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int32>, ffi.Pointer<wchar_t>, int, int, int)>();

  int _wsopen_dispatch(
    ffi.Pointer<wchar_t> _FileName,
    int _OFlag,
    int _ShFlag,
    int _PMode,
    ffi.Pointer<ffi.Int32> _PFileHandle,
    int _BSecure,
  ) {
    return __wsopen_dispatch(
      _FileName,
      _OFlag,
      _ShFlag,
      _PMode,
      _PFileHandle,
      _BSecure,
    );
  }

  late final __wsopen_dispatchPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32)>>('_wsopen_dispatch');
  late final __wsopen_dispatch = __wsopen_dispatchPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, int, int, int, ffi.Pointer<ffi.Int32>, int)>();

  int _wopen(
    ffi.Pointer<wchar_t> _FileName,
    int _OpenFlag,
  ) {
    return __wopen(
      _FileName,
      _OpenFlag,
    );
  }

  late final __wopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Int32)>>('_wopen');
  late final __wopen =
      __wopenPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  int _wsopen(
    ffi.Pointer<wchar_t> _FileName,
    int _OpenFlag,
    int _ShareFlag,
  ) {
    return __wsopen(
      _FileName,
      _OpenFlag,
      _ShareFlag,
    );
  }

  late final __wsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Int32, ffi.Int32)>>('_wsopen');
  late final __wsopen =
      __wsopenPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int, int)>();

  int _wexecl(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wexecl(
      _FileName,
      _ArgList,
    );
  }

  late final __wexeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wexecl');
  late final __wexecl = __wexeclPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wexecle(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wexecle(
      _FileName,
      _ArgList,
    );
  }

  late final __wexeclePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wexecle');
  late final __wexecle = __wexeclePtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wexeclp(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wexeclp(
      _FileName,
      _ArgList,
    );
  }

  late final __wexeclpPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wexeclp');
  late final __wexeclp = __wexeclpPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wexeclpe(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wexeclpe(
      _FileName,
      _ArgList,
    );
  }

  late final __wexeclpePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wexeclpe');
  late final __wexeclpe = __wexeclpePtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wexecv(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
  ) {
    return __wexecv(
      _FileName,
      _ArgList,
    );
  }

  late final __wexecvPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wexecv');
  late final __wexecv = __wexecvPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wexecve(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Env,
  ) {
    return __wexecve(
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wexecvePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wexecve');
  late final __wexecve = __wexecvePtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wexecvp(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
  ) {
    return __wexecvp(
      _FileName,
      _ArgList,
    );
  }

  late final __wexecvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wexecvp');
  late final __wexecvp = __wexecvpPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wexecvpe(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Env,
  ) {
    return __wexecvpe(
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wexecvpePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wexecvpe');
  late final __wexecvpe = __wexecvpePtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wspawnl(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wspawnl(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnlPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Int32, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wspawnl');
  late final __wspawnl = __wspawnlPtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wspawnle(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wspawnle(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnlePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Int32, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wspawnle');
  late final __wspawnle = __wspawnlePtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wspawnlp(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wspawnlp(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Int32, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wspawnlp');
  late final __wspawnlp = __wspawnlpPtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wspawnlpe(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _ArgList,
  ) {
    return __wspawnlpe(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnlpePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Int32, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wspawnlpe');
  late final __wspawnlpe = __wspawnlpePtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wspawnv(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
  ) {
    return __wspawnv(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnvPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Int32, ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wspawnv');
  late final __wspawnv = __wspawnvPtr.asFunction<
      int Function(
          int, ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wspawnve(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Env,
  ) {
    return __wspawnve(
      _Mode,
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wspawnvePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Int32,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wspawnve');
  late final __wspawnve = __wspawnvePtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wspawnvp(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
  ) {
    return __wspawnvp(
      _Mode,
      _FileName,
      _ArgList,
    );
  }

  late final __wspawnvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Int32, ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wspawnvp');
  late final __wspawnvp = __wspawnvpPtr.asFunction<
      int Function(
          int, ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wspawnvpe(
    int _Mode,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<ffi.Pointer<wchar_t>> _ArgList,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Env,
  ) {
    return __wspawnvpe(
      _Mode,
      _FileName,
      _ArgList,
      _Env,
    );
  }

  late final __wspawnvpePtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Int32,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_wspawnvpe');
  late final __wspawnvpe = __wspawnvpePtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int _wsystem(
    ffi.Pointer<wchar_t> _Command,
  ) {
    return __wsystem(
      _Command,
    );
  }

  late final __wsystemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wsystem');
  late final __wsystem =
      __wsystemPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> __acrt_iob_func(
    int _Ix,
  ) {
    return ___acrt_iob_func(
      _Ix,
    );
  }

  late final ___acrt_iob_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Uint32)>>(
          '__acrt_iob_func');
  late final ___acrt_iob_func =
      ___acrt_iob_funcPtr.asFunction<ffi.Pointer<FILE> Function(int)>();

  int fgetwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('fgetwc');
  late final _fgetwc = _fgetwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetwchar() {
    return __fgetwchar();
  }

  late final __fgetwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_fgetwchar');
  late final __fgetwchar = __fgetwcharPtr.asFunction<int Function()>();

  int fputwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          'fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputwchar(
    int _Character,
  ) {
    return __fputwchar(
      _Character,
    );
  }

  late final __fputwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('_fputwchar');
  late final __fputwchar = __fputwcharPtr.asFunction<int Function(int)>();

  int getwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('getwc');
  late final _getwc = _getwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>();

  ffi.Pointer<wchar_t> fgetws(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Int32, ffi.Pointer<FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<FILE>)>();

  int fputws(
    ffi.Pointer<wchar_t> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<wchar_t> _getws_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return __getws_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __getws_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, size_t)>>('_getws_s');
  late final __getws_s = __getws_sPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  int putwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          'putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<int Function(int)>();

  int _putws(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return __putws(
      _Buffer,
    );
  }

  late final __putwsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_putws');
  late final __putws =
      __putwsPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int ungetwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          'ungetwc');
  late final _ungetwc =
      _ungetwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfdopen(
    int _FileHandle,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wfdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __wfdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<wchar_t>)>>('_wfdopen');
  late final __wfdopen = __wfdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> _wfopen(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wfopen(
      _FileName,
      _Mode,
    );
  }

  late final __wfopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wfopen');
  late final __wfopen = __wfopenPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wfopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wfopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wfopen_s');
  late final __wfopen_s = __wfopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> _wfreopen(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<FILE>)>>('_wfreopen');
  late final __wfreopen = __wfreopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  int _wfreopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>>('_wfreopen_s');
  late final __wfreopen_s = __wfreopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfsopen(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    int _ShFlag,
  ) {
    return __wfsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __wfsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Int32)>>('_wfsopen');
  late final __wfsopen = __wfsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  void _wperror(
    ffi.Pointer<wchar_t> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wchar_t>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> _wpopen(
    ffi.Pointer<wchar_t> _Command,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wpopen(
      _Command,
      _Mode,
    );
  }

  late final __wpopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wpopen');
  late final __wpopen = __wpopenPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wremove(
    ffi.Pointer<wchar_t> _FileName,
  ) {
    return __wremove(
      _FileName,
    );
  }

  late final __wremovePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wremove');
  late final __wremove =
      __wremovePtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> _wtempnam(
    ffi.Pointer<wchar_t> _Directory,
    ffi.Pointer<wchar_t> _FilePrefix,
  ) {
    return __wtempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final __wtempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wtempnam');
  late final __wtempnam = __wtempnamPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wtmpnam_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return __wtmpnam_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __wtmpnam_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wtmpnam_s');
  late final __wtmpnam_s =
      __wtmpnam_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wtmpnam(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return __wtmpnam(
      _Buffer,
    );
  }

  late final __wtmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wtmpnam');
  late final __wtmpnam = __wtmpnamPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _fgetwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetwc_nolock(
      _Stream,
    );
  }

  late final __fgetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_fgetwc_nolock');
  late final __fgetwc_nolock =
      __fgetwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          '_fputwc_nolock');
  late final __fputwc_nolock =
      __fputwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _getwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getwc_nolock(
      _Stream,
    );
  }

  late final __getwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_getwc_nolock');
  late final __getwc_nolock =
      __getwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          '_putwc_nolock');
  late final __putwc_nolock =
      __putwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          '_ungetwc_nolock');
  late final __ungetwc_nolock =
      __ungetwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int __stdio_common_vfwprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf');
  late final ___stdio_common_vfwprintf =
      ___stdio_common_vfwprintfPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>();

  int __stdio_common_vfwprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_s');
  late final ___stdio_common_vfwprintf_s =
      ___stdio_common_vfwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>();

  int __stdio_common_vfwprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_p');
  late final ___stdio_common_vfwprintf_p =
      ___stdio_common_vfwprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>();

  int __stdio_common_vfwscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwscanf');
  late final ___stdio_common_vfwscanf = ___stdio_common_vfwscanfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  int __stdio_common_vswprintf(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf');
  late final ___stdio_common_vswprintf =
      ___stdio_common_vswprintfPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              _locale_t, va_list)>();

  int __stdio_common_vswprintf_s(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_s');
  late final ___stdio_common_vswprintf_s =
      ___stdio_common_vswprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              _locale_t, va_list)>();

  int __stdio_common_vsnwprintf_s(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnwprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vsnwprintf_s');
  late final ___stdio_common_vsnwprintf_s =
      ___stdio_common_vsnwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, int,
              ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  int __stdio_common_vswprintf_p(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_p');
  late final ___stdio_common_vswprintf_p =
      ___stdio_common_vswprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              _locale_t, va_list)>();

  int __stdio_common_vswscanf(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswscanf');
  late final ___stdio_common_vswscanf = ___stdio_common_vswscanfPtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
          _locale_t, va_list)>();

  int _itow_s(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int32, ffi.Pointer<wchar_t>, size_t, ffi.Int32)>>('_itow_s');
  late final __itow_s = __itow_sPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> _itow(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return __itow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int32, ffi.Pointer<wchar_t>, ffi.Int32)>>('_itow');
  late final __itow = __itowPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int _ltow_s(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int64, ffi.Pointer<wchar_t>, size_t, ffi.Int32)>>('_ltow_s');
  late final __ltow_s = __ltow_sPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> _ltow(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return __ltow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_ltow');
  late final __ltow = __ltowPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int _ultow_s(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Uint64, ffi.Pointer<wchar_t>, size_t,
              ffi.Int32)>>('_ultow_s');
  late final __ultow_s = __ultow_sPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> _ultow(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return __ultow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Uint64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_ultow');
  late final __ultow = __ultowPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  double wcstod(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
  ) {
    return _wcstod(
      _String,
      _EndPtr,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  double _wcstod_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, _locale_t)>>('_wcstod_l');
  late final __wcstod_l = __wcstod_lPtr.asFunction<
      double Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          _locale_t)>();

  int wcstol(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int _wcstol_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              _locale_t)>>('_wcstol_l');
  late final __wcstol_l = __wcstol_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          _locale_t)>();

  int wcstoll(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int _wcstoll_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              _locale_t)>>('_wcstoll_l');
  late final __wcstoll_l = __wcstoll_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          _locale_t)>();

  int wcstoul(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int _wcstoul_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              _locale_t)>>('_wcstoul_l');
  late final __wcstoul_l = __wcstoul_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          _locale_t)>();

  int wcstoull(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int _wcstoull_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              _locale_t)>>('_wcstoull_l');
  late final __wcstoull_l = __wcstoull_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          _locale_t)>();

  double wcstof(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
  ) {
    return _wcstof(
      _String,
      _EndPtr,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  double _wcstof_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, _locale_t)>>('_wcstof_l');
  late final __wcstof_l = __wcstof_lPtr.asFunction<
      double Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          _locale_t)>();

  double _wtof(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wtof(
      _String,
    );
  }

  late final __wtofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<wchar_t>)>>(
          '_wtof');
  late final __wtof =
      __wtofPtr.asFunction<double Function(ffi.Pointer<wchar_t>)>();

  double _wtof_l(
    ffi.Pointer<wchar_t> _String,
    _locale_t _Locale,
  ) {
    return __wtof_l(
      _String,
      _Locale,
    );
  }

  late final __wtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<wchar_t>, _locale_t)>>('_wtof_l');
  late final __wtof_l = __wtof_lPtr
      .asFunction<double Function(ffi.Pointer<wchar_t>, _locale_t)>();

  int _wtoi(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wtoi(
      _String,
    );
  }

  late final __wtoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wtoi');
  late final __wtoi =
      __wtoiPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wtoi_l(
    ffi.Pointer<wchar_t> _String,
    _locale_t _Locale,
  ) {
    return __wtoi_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, _locale_t)>>('_wtoi_l');
  late final __wtoi_l =
      __wtoi_lPtr.asFunction<int Function(ffi.Pointer<wchar_t>, _locale_t)>();

  int _wtol(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wtol(
      _String,
    );
  }

  late final __wtolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<wchar_t>)>>(
          '_wtol');
  late final __wtol =
      __wtolPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wtol_l(
    ffi.Pointer<wchar_t> _String,
    _locale_t _Locale,
  ) {
    return __wtol_l(
      _String,
      _Locale,
    );
  }

  late final __wtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>, _locale_t)>>('_wtol_l');
  late final __wtol_l =
      __wtol_lPtr.asFunction<int Function(ffi.Pointer<wchar_t>, _locale_t)>();

  int _wtoll(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wtoll(
      _String,
    );
  }

  late final __wtollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<wchar_t>)>>(
          '_wtoll');
  late final __wtoll =
      __wtollPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wtoll_l(
    ffi.Pointer<wchar_t> _String,
    _locale_t _Locale,
  ) {
    return __wtoll_l(
      _String,
      _Locale,
    );
  }

  late final __wtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>, _locale_t)>>('_wtoll_l');
  late final __wtoll_l =
      __wtoll_lPtr.asFunction<int Function(ffi.Pointer<wchar_t>, _locale_t)>();

  int _i64tow_s(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Int64, ffi.Pointer<wchar_t>, size_t,
              ffi.Int32)>>('_i64tow_s');
  late final __i64tow_s = __i64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> _i64tow(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return __i64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_i64tow');
  late final __i64tow = __i64towPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int _ui64tow_s(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Uint64, ffi.Pointer<wchar_t>, size_t,
              ffi.Int32)>>('_ui64tow_s');
  late final __ui64tow_s = __ui64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> _ui64tow(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return __ui64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Uint64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_ui64tow');
  late final __ui64tow = __ui64towPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int _wtoi64(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wtoi64(
      _String,
    );
  }

  late final __wtoi64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<wchar_t>)>>(
          '_wtoi64');
  late final __wtoi64 =
      __wtoi64Ptr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wtoi64_l(
    ffi.Pointer<wchar_t> _String,
    _locale_t _Locale,
  ) {
    return __wtoi64_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>, _locale_t)>>('_wtoi64_l');
  late final __wtoi64_l =
      __wtoi64_lPtr.asFunction<int Function(ffi.Pointer<wchar_t>, _locale_t)>();

  int _wcstoi64(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('_wcstoi64');
  late final __wcstoi64 = __wcstoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int _wcstoi64_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              _locale_t)>>('_wcstoi64_l');
  late final __wcstoi64_l = __wcstoi64_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          _locale_t)>();

  int _wcstoui64(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('_wcstoui64');
  late final __wcstoui64 = __wcstoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int _wcstoui64_l(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              _locale_t)>>('_wcstoui64_l');
  late final __wcstoui64_l = __wcstoui64_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          _locale_t)>();

  ffi.Pointer<wchar_t> _wfullpath(
    ffi.Pointer<wchar_t> _Buffer,
    ffi.Pointer<wchar_t> _Path,
    int _BufferCount,
  ) {
    return __wfullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __wfullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, size_t)>>('_wfullpath');
  late final __wfullpath = __wfullpathPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int _wmakepath_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Drive,
    ffi.Pointer<wchar_t> _Dir,
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _Ext,
  ) {
    return __wmakepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wmakepath_s');
  late final __wmakepath_s = __wmakepath_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  void _wmakepath(
    ffi.Pointer<wchar_t> _Buffer,
    ffi.Pointer<wchar_t> _Drive,
    ffi.Pointer<wchar_t> _Dir,
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _Ext,
  ) {
    return __wmakepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wmakepath');
  late final __wmakepath = __wmakepathPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  void _wsplitpath(
    ffi.Pointer<wchar_t> _FullPath,
    ffi.Pointer<wchar_t> _Drive,
    ffi.Pointer<wchar_t> _Dir,
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _Ext,
  ) {
    return __wsplitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wsplitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wsplitpath');
  late final __wsplitpath = __wsplitpathPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wsplitpath_s(
    ffi.Pointer<wchar_t> _FullPath,
    ffi.Pointer<wchar_t> _Drive,
    int _DriveCount,
    ffi.Pointer<wchar_t> _Dir,
    int _DirCount,
    ffi.Pointer<wchar_t> _Filename,
    int _FilenameCount,
    ffi.Pointer<wchar_t> _Ext,
    int _ExtCount,
  ) {
    return __wsplitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __wsplitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              size_t)>>('_wsplitpath_s');
  late final __wsplitpath_s = __wsplitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>,
          int,
          ffi.Pointer<wchar_t>,
          int,
          ffi.Pointer<wchar_t>,
          int,
          ffi.Pointer<wchar_t>,
          int)>();

  int _wdupenv_s(
    ffi.Pointer<ffi.Pointer<wchar_t>> _Buffer,
    ffi.Pointer<size_t> _BufferCount,
    ffi.Pointer<wchar_t> _VarName,
  ) {
    return __wdupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wdupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Pointer<size_t>, ffi.Pointer<wchar_t>)>>('_wdupenv_s');
  late final __wdupenv_s = __wdupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Pointer<size_t>,
          ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> _wgetenv(
    ffi.Pointer<wchar_t> _VarName,
  ) {
    return __wgetenv(
      _VarName,
    );
  }

  late final __wgetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wgetenv');
  late final __wgetenv = __wgetenvPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _wgetenv_s(
    ffi.Pointer<size_t> _RequiredCount,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _VarName,
  ) {
    return __wgetenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wgetenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<wchar_t>)>>('_wgetenv_s');
  late final __wgetenv_s = __wgetenv_sPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, int,
          ffi.Pointer<wchar_t>)>();

  int _wputenv(
    ffi.Pointer<wchar_t> _EnvString,
  ) {
    return __wputenv(
      _EnvString,
    );
  }

  late final __wputenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wputenv');
  late final __wputenv =
      __wputenvPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int _wputenv_s(
    ffi.Pointer<wchar_t> _Name,
    ffi.Pointer<wchar_t> _Value,
  ) {
    return __wputenv_s(
      _Name,
      _Value,
    );
  }

  late final __wputenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wputenv_s');
  late final __wputenv_s = __wputenv_sPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wsearchenv_s(
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _VarName,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return __wsearchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __wsearchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, size_t)>>('_wsearchenv_s');
  late final __wsearchenv_s = __wsearchenv_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, int)>();

  void _wsearchenv(
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _VarName,
    ffi.Pointer<wchar_t> _ResultPath,
  ) {
    return __wsearchenv(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  late final __wsearchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wsearchenv');
  late final __wsearchenv = __wsearchenvPtr.asFunction<
      void Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcscat_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscat_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t,
              ffi.Pointer<wchar_t>)>>('wcscat_s');
  late final _wcscat_s = _wcscat_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>)>();

  int wcscpy_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscpy_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t,
              ffi.Pointer<wchar_t>)>>('wcscpy_s');
  late final _wcscpy_s = _wcscpy_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>)>();

  int wcsncat_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsncat_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t, ffi.Pointer<wchar_t>,
              rsize_t)>>('wcsncat_s');
  late final _wcsncat_s = _wcsncat_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, int)>();

  int wcsncpy_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsncpy_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t, ffi.Pointer<wchar_t>,
              rsize_t)>>('wcsncpy_s');
  late final _wcsncpy_s = _wcsncpy_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcstok_s(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Delimiter,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Context,
  ) {
    return _wcstok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstok_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstok_s');
  late final _wcstok_s = _wcstok_sPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  ffi.Pointer<wchar_t> _wcsdup(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wcsdup(
      _String,
    );
  }

  late final __wcsdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcsdup');
  late final __wcsdup = __wcsdupPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcscat(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscat(
      _Destination,
      _Source,
    );
  }

  late final _wcscatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscat');
  late final _wcscat = _wcscatPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcscmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcscmp(
      _String1,
      _String2,
    );
  }

  late final _wcscmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscmp');
  late final _wcscmp = _wcscmpPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcscpy(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscpy(
      _Destination,
      _Source,
    );
  }

  late final _wcscpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscpy');
  late final _wcscpy = _wcscpyPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcscspn(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Control,
  ) {
    return _wcscspn(
      _String,
      _Control,
    );
  }

  late final _wcscspnPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscspn');
  late final _wcscspn = _wcscspnPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcslen(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcslen(
      _String,
    );
  }

  late final _wcslenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<wchar_t>)>>(
          'wcslen');
  late final _wcslen =
      _wcslenPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int wcsnlen(
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsnlen(
      _Source,
      _MaxCount,
    );
  }

  late final _wcsnlenPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      'wcsnlen');
  late final _wcsnlen =
      _wcsnlenPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsncat(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _Count,
  ) {
    return _wcsncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsncat');
  late final _wcsncat = _wcsncatPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int wcsncmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return _wcsncmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsncmp');
  late final _wcsncmp = _wcsncmpPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsncpy(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _Count,
  ) {
    return _wcsncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsncpy');
  late final _wcsncpy = _wcsncpyPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcspbrk(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Control,
  ) {
    return _wcspbrk(
      _String,
      _Control,
    );
  }

  late final _wcspbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcspbrk');
  late final _wcspbrk = _wcspbrkPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcsspn(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Control,
  ) {
    return _wcsspn(
      _String,
      _Control,
    );
  }

  late final _wcsspnPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsspn');
  late final _wcsspn = _wcsspnPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcstok(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Delimiter,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Context,
  ) {
    return _wcstok(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstok');
  late final _wcstok = _wcstokPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  ffi.Pointer<wchar_t> _wcserror(
    int _ErrorNumber,
  ) {
    return __wcserror1(
      _ErrorNumber,
    );
  }

  late final __wcserrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wchar_t> Function(ffi.Int32)>>(
          '_wcserror');
  late final __wcserror1 =
      __wcserrorPtr.asFunction<ffi.Pointer<wchar_t> Function(int)>();

  int _wcserror_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    int _ErrorNumber,
  ) {
    return __wcserror_s1(
      _Buffer,
      _SizeInWords,
      _ErrorNumber,
    );
  }

  late final __wcserror_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, ffi.Int32)>>('_wcserror_s');
  late final __wcserror_s1 = __wcserror_sPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> __wcserror(
    ffi.Pointer<wchar_t> _String,
  ) {
    return ___wcserror(
      _String,
    );
  }

  late final ___wcserrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('__wcserror');
  late final ___wcserror = ___wcserrorPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int __wcserror_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _ErrorMessage,
  ) {
    return ___wcserror_s(
      _Buffer,
      _SizeInWords,
      _ErrorMessage,
    );
  }

  late final ___wcserror_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<wchar_t>)>>('__wcserror_s');
  late final ___wcserror_s = ___wcserror_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>)>();

  int _wcsicmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return __wcsicmp(
      _String1,
      _String2,
    );
  }

  late final __wcsicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wcsicmp');
  late final __wcsicmp = __wcsicmpPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wcsicmp_l(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    _locale_t _Locale,
  ) {
    return __wcsicmp_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              _locale_t)>>('_wcsicmp_l');
  late final __wcsicmp_l = __wcsicmp_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, _locale_t)>();

  int _wcsnicmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return __wcsnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              size_t)>>('_wcsnicmp');
  late final __wcsnicmp = __wcsnicmpPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int _wcsnicmp_l(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsnicmp_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              _locale_t)>>('_wcsnicmp_l');
  late final __wcsnicmp_l = __wcsnicmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int, _locale_t)>();

  int _wcsnset_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset_s(
      _Destination,
      _SizeInWords,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, wchar_t, size_t)>>('_wcsnset_s');
  late final __wcsnset_s = __wcsnset_sPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, int, int)>();

  ffi.Pointer<wchar_t> _wcsnset(
    ffi.Pointer<wchar_t> _String,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t, size_t)>>('_wcsnset');
  late final __wcsnset = __wcsnsetPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> _wcsrev(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wcsrev(
      _String,
    );
  }

  late final __wcsrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcsrev');
  late final __wcsrev = __wcsrevPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _wcsset_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    int _Value,
  ) {
    return __wcsset_s(
      _Destination,
      _SizeInWords,
      _Value,
    );
  }

  late final __wcsset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, wchar_t)>>('_wcsset_s');
  late final __wcsset_s =
      __wcsset_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> _wcsset(
    ffi.Pointer<wchar_t> _String,
    int _Value,
  ) {
    return __wcsset(
      _String,
      _Value,
    );
  }

  late final __wcssetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('_wcsset');
  late final __wcsset = __wcssetPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  int _wcslwr_s(
    ffi.Pointer<wchar_t> _String,
    int _SizeInWords,
  ) {
    return __wcslwr_s(
      _String,
      _SizeInWords,
    );
  }

  late final __wcslwr_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wcslwr_s');
  late final __wcslwr_s =
      __wcslwr_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wcslwr(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wcslwr(
      _String,
    );
  }

  late final __wcslwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcslwr');
  late final __wcslwr = __wcslwrPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _wcslwr_s_l(
    ffi.Pointer<wchar_t> _String,
    int _SizeInWords,
    _locale_t _Locale,
  ) {
    return __wcslwr_s_l(
      _String,
      _SizeInWords,
      _Locale,
    );
  }

  late final __wcslwr_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, _locale_t)>>('_wcslwr_s_l');
  late final __wcslwr_s_l = __wcslwr_s_lPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, _locale_t)>();

  ffi.Pointer<wchar_t> _wcslwr_l(
    ffi.Pointer<wchar_t> _String,
    _locale_t _Locale,
  ) {
    return __wcslwr_l(
      _String,
      _Locale,
    );
  }

  late final __wcslwr_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, _locale_t)>>('_wcslwr_l');
  late final __wcslwr_l = __wcslwr_lPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, _locale_t)>();

  int _wcsupr_s(
    ffi.Pointer<wchar_t> _String,
    int _Size,
  ) {
    return __wcsupr_s(
      _String,
      _Size,
    );
  }

  late final __wcsupr_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wcsupr_s');
  late final __wcsupr_s =
      __wcsupr_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wcsupr(
    ffi.Pointer<wchar_t> _String,
  ) {
    return __wcsupr(
      _String,
    );
  }

  late final __wcsuprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcsupr');
  late final __wcsupr = __wcsuprPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _wcsupr_s_l(
    ffi.Pointer<wchar_t> _String,
    int _Size,
    _locale_t _Locale,
  ) {
    return __wcsupr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __wcsupr_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, _locale_t)>>('_wcsupr_s_l');
  late final __wcsupr_s_l = __wcsupr_s_lPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, _locale_t)>();

  ffi.Pointer<wchar_t> _wcsupr_l(
    ffi.Pointer<wchar_t> _String,
    _locale_t _Locale,
  ) {
    return __wcsupr_l(
      _String,
      _Locale,
    );
  }

  late final __wcsupr_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, _locale_t)>>('_wcsupr_l');
  late final __wcsupr_l = __wcsupr_lPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, _locale_t)>();

  int wcsxfrm(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsxfrmPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsxfrm');
  late final _wcsxfrm = _wcsxfrmPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int _wcsxfrm_l(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsxfrm_l(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              _locale_t)>>('_wcsxfrm_l');
  late final __wcsxfrm_l = __wcsxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int, _locale_t)>();

  int wcscoll(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcscoll(
      _String1,
      _String2,
    );
  }

  late final _wcscollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscoll');
  late final _wcscoll = _wcscollPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wcscoll_l(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    _locale_t _Locale,
  ) {
    return __wcscoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcscoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              _locale_t)>>('_wcscoll_l');
  late final __wcscoll_l = __wcscoll_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, _locale_t)>();

  int _wcsicoll(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return __wcsicoll(
      _String1,
      _String2,
    );
  }

  late final __wcsicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wcsicoll');
  late final __wcsicoll = __wcsicollPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wcsicoll_l(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    _locale_t _Locale,
  ) {
    return __wcsicoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              _locale_t)>>('_wcsicoll_l');
  late final __wcsicoll_l = __wcsicoll_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, _locale_t)>();

  int _wcsncoll(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return __wcsncoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsncollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              size_t)>>('_wcsncoll');
  late final __wcsncoll = __wcsncollPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int _wcsncoll_l(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsncoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsncoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              _locale_t)>>('_wcsncoll_l');
  late final __wcsncoll_l = __wcsncoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int, _locale_t)>();

  int _wcsnicoll(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return __wcsnicoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              size_t)>>('_wcsnicoll');
  late final __wcsnicoll = __wcsnicollPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int _wcsnicoll_l(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcsnicoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              _locale_t)>>('_wcsnicoll_l');
  late final __wcsnicoll_l = __wcsnicoll_lPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int, _locale_t)>();

  ffi.Pointer<wchar_t> wcsdup(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsdup1(
      _String,
    );
  }

  late final _wcsdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcsdup');
  late final _wcsdup1 = _wcsdupPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcsicmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcsicmp1(
      _String1,
      _String2,
    );
  }

  late final _wcsicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsicmp');
  late final _wcsicmp1 = _wcsicmpPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcsnicmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return _wcsnicmp1(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsnicmp');
  late final _wcsnicmp1 = _wcsnicmpPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsnset(
    ffi.Pointer<wchar_t> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _wcsnset1(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _wcsnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t, size_t)>>('wcsnset');
  late final _wcsnset1 = _wcsnsetPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> wcsrev(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsrev1(
      _String,
    );
  }

  late final _wcsrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcsrev');
  late final _wcsrev1 = _wcsrevPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcsset(
    ffi.Pointer<wchar_t> _String,
    int _Value,
  ) {
    return _wcsset1(
      _String,
      _Value,
    );
  }

  late final _wcssetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('wcsset');
  late final _wcsset1 = _wcssetPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcslwr(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcslwr1(
      _String,
    );
  }

  late final _wcslwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcslwr');
  late final _wcslwr1 = _wcslwrPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcsupr(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsupr1(
      _String,
    );
  }

  late final _wcsuprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcsupr');
  late final _wcsupr1 = _wcsuprPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcsicoll(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcsicoll1(
      _String1,
      _String2,
    );
  }

  late final _wcsicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsicoll');
  late final _wcsicoll1 = _wcsicollPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> _wasctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime(
      _Tm,
    );
  }

  late final __wasctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<tm>)>>(
      '_wasctime');
  late final __wasctime = __wasctimePtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<tm>)>();

  int _wasctime_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime_s(
      _Buffer,
      _SizeInWords,
      _Tm,
    );
  }

  late final __wasctime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, ffi.Pointer<tm>)>>('_wasctime_s');
  late final __wasctime_s = __wasctime_sPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<tm>)>();

  int wcsftime(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _wcsftime(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
    );
  }

  late final _wcsftimePtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t, ffi.Pointer<wchar_t>,
              ffi.Pointer<tm>)>>('wcsftime');
  late final _wcsftime = _wcsftimePtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, ffi.Pointer<tm>)>();

  int _wcsftime_l(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Format,
    ffi.Pointer<tm> _Tm,
    _locale_t _Locale,
  ) {
    return __wcsftime_l(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final __wcsftime_lPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t, ffi.Pointer<wchar_t>,
              ffi.Pointer<tm>, _locale_t)>>('_wcsftime_l');
  late final __wcsftime_l = __wcsftime_lPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
          ffi.Pointer<tm>, _locale_t)>();

  ffi.Pointer<wchar_t> _wctime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __wctime32(
      _Time,
    );
  }

  late final __wctime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<__time32_t>)>>('_wctime32');
  late final __wctime32 = __wctime32Ptr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<__time32_t>)>();

  int _wctime32_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __wctime32_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<__time32_t>)>>('_wctime32_s');
  late final __wctime32_s = __wctime32_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<wchar_t> _wctime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __wctime64(
      _Time,
    );
  }

  late final __wctime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<__time64_t>)>>('_wctime64');
  late final __wctime64 = __wctime64Ptr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<__time64_t>)>();

  int _wctime64_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __wctime64_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<__time64_t>)>>('_wctime64_s');
  late final __wctime64_s = __wctime64_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<__time64_t>)>();

  int _wstrdate_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrdate_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrdate_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wstrdate_s');
  late final __wstrdate_s =
      __wstrdate_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wstrdate(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return __wstrdate(
      _Buffer,
    );
  }

  late final __wstrdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wstrdate');
  late final __wstrdate = __wstrdatePtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _wstrtime_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrtime_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrtime_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wstrtime_s');
  late final __wstrtime_s =
      __wstrtime_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wstrtime(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return __wstrtime(
      _Buffer,
    );
  }

  late final __wstrtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wstrtime');
  late final __wstrtime = __wstrtimePtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _fstat32(
    int _FileHandle,
    ffi.Pointer<_stat32> _Stat,
  ) {
    return __fstat32(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<_stat32>)>>('_fstat32');
  late final __fstat32 =
      __fstat32Ptr.asFunction<int Function(int, ffi.Pointer<_stat32>)>();

  int _fstat32i64(
    int _FileHandle,
    ffi.Pointer<_stat32i64> _Stat,
  ) {
    return __fstat32i64(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat32i64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<_stat32i64>)>>('_fstat32i64');
  late final __fstat32i64 =
      __fstat32i64Ptr.asFunction<int Function(int, ffi.Pointer<_stat32i64>)>();

  int _fstat64i32(
    int _FileHandle,
    ffi.Pointer<_stat64i32> _Stat,
  ) {
    return __fstat64i32(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat64i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<_stat64i32>)>>('_fstat64i32');
  late final __fstat64i32 =
      __fstat64i32Ptr.asFunction<int Function(int, ffi.Pointer<_stat64i32>)>();

  int _fstat64(
    int _FileHandle,
    ffi.Pointer<_stat64> _Stat,
  ) {
    return __fstat64(
      _FileHandle,
      _Stat,
    );
  }

  late final __fstat64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<_stat64>)>>('_fstat64');
  late final __fstat64 =
      __fstat64Ptr.asFunction<int Function(int, ffi.Pointer<_stat64>)>();

  int _stat321(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat32> _Stat,
  ) {
    return __stat321(
      _FileName,
      _Stat,
    );
  }

  late final __stat321Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat32>)>>('_stat32');
  late final __stat321 = __stat321Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat32>)>();

  int _stat32i641(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat32i64> _Stat,
  ) {
    return __stat32i641(
      _FileName,
      _Stat,
    );
  }

  late final __stat32i641Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat32i64>)>>('_stat32i64');
  late final __stat32i641 = __stat32i641Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat32i64>)>();

  int _stat64i321(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat64i32> _Stat,
  ) {
    return __stat64i321(
      _FileName,
      _Stat,
    );
  }

  late final __stat64i321Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat64i32>)>>('_stat64i32');
  late final __stat64i321 = __stat64i321Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat64i32>)>();

  int _stat641(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<_stat64> _Stat,
  ) {
    return __stat641(
      _FileName,
      _Stat,
    );
  }

  late final __stat641Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat64>)>>('_stat64');
  late final __stat641 = __stat641Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<_stat64>)>();

  int _wstat32(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_stat32> _Stat,
  ) {
    return __wstat32(
      _FileName,
      _Stat,
    );
  }

  late final __wstat32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<_stat32>)>>('_wstat32');
  late final __wstat32 = __wstat32Ptr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_stat32>)>();

  int _wstat32i64(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_stat32i64> _Stat,
  ) {
    return __wstat32i64(
      _FileName,
      _Stat,
    );
  }

  late final __wstat32i64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<_stat32i64>)>>('_wstat32i64');
  late final __wstat32i64 = __wstat32i64Ptr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_stat32i64>)>();

  int _wstat64i32(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_stat64i32> _Stat,
  ) {
    return __wstat64i32(
      _FileName,
      _Stat,
    );
  }

  late final __wstat64i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<_stat64i32>)>>('_wstat64i32');
  late final __wstat64i32 = __wstat64i32Ptr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_stat64i32>)>();

  int _wstat64(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<_stat64> _Stat,
  ) {
    return __wstat64(
      _FileName,
      _Stat,
    );
  }

  late final __wstat64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<_stat64>)>>('_wstat64');
  late final __wstat64 = __wstat64Ptr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<_stat64>)>();

  ffi.Pointer<wchar_t> _wsetlocale(
    int _Category,
    ffi.Pointer<wchar_t> _Locale,
  ) {
    return __wsetlocale(
      _Category,
      _Locale,
    );
  }

  late final __wsetlocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int32, ffi.Pointer<wchar_t>)>>('_wsetlocale');
  late final __wsetlocale = __wsetlocalePtr
      .asFunction<ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>)>();

  _locale_t _wcreate_locale(
    int _Category,
    ffi.Pointer<wchar_t> _Locale,
  ) {
    return __wcreate_locale(
      _Category,
      _Locale,
    );
  }

  late final __wcreate_localePtr = _lookup<
      ffi.NativeFunction<
          _locale_t Function(
              ffi.Int32, ffi.Pointer<wchar_t>)>>('_wcreate_locale');
  late final __wcreate_locale = __wcreate_localePtr
      .asFunction<_locale_t Function(int, ffi.Pointer<wchar_t>)>();

  int btowc(
    int _Ch,
  ) {
    return _btowc(
      _Ch,
    );
  }

  late final _btowcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Int32)>>('btowc');
  late final _btowc = _btowcPtr.asFunction<int Function(int)>();

  int mbrlen(
    ffi.Pointer<ffi.Int8> _Ch,
    int _SizeInBytes,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _mbrlen(
      _Ch,
      _SizeInBytes,
      _State,
    );
  }

  late final _mbrlenPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<mbstate_t>)>>('mbrlen');
  late final _mbrlen = _mbrlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<mbstate_t>)>();

  int mbrtowc(
    ffi.Pointer<wchar_t> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SizeInBytes,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _mbrtowc(
      _DstCh,
      _SrcCh,
      _SizeInBytes,
      _State,
    );
  }

  late final _mbrtowcPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<mbstate_t>)>>('mbrtowc');
  late final _mbrtowc = _mbrtowcPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<mbstate_t>)>();

  int mbsrtowcs_s(
    ffi.Pointer<size_t> _Retval,
    ffi.Pointer<wchar_t> _Dst,
    int _Size,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
    int _N,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _mbsrtowcs_s(
      _Retval,
      _Dst,
      _Size,
      _PSrc,
      _N,
      _State,
    );
  }

  late final _mbsrtowcs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              size_t,
              ffi.Pointer<mbstate_t>)>>('mbsrtowcs_s');
  late final _mbsrtowcs_s = _mbsrtowcs_sPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, int,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, int, ffi.Pointer<mbstate_t>)>();

  int mbsrtowcs(
    ffi.Pointer<wchar_t> _Dest,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _PSrc,
    int _Count,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _mbsrtowcs(
      _Dest,
      _PSrc,
      _Count,
      _State,
    );
  }

  late final _mbsrtowcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              size_t,
              ffi.Pointer<mbstate_t>)>>('mbsrtowcs');
  late final _mbsrtowcs = _mbsrtowcsPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, ffi.Pointer<mbstate_t>)>();

  int wcrtomb_s(
    ffi.Pointer<size_t> _Retval,
    ffi.Pointer<ffi.Int8> _Dst,
    int _SizeInBytes,
    int _Ch,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _wcrtomb_s(
      _Retval,
      _Dst,
      _SizeInBytes,
      _Ch,
      _State,
    );
  }

  late final _wcrtomb_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, size_t,
              wchar_t, ffi.Pointer<mbstate_t>)>>('wcrtomb_s');
  late final _wcrtomb_s = _wcrtomb_sPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int, int,
          ffi.Pointer<mbstate_t>)>();

  int wcrtomb(
    ffi.Pointer<ffi.Int8> _Dest,
    int _Source,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _wcrtomb(
      _Dest,
      _Source,
      _State,
    );
  }

  late final _wcrtombPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, wchar_t,
              ffi.Pointer<mbstate_t>)>>('wcrtomb');
  late final _wcrtomb = _wcrtombPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<mbstate_t>)>();

  int wcsrtombs_s(
    ffi.Pointer<size_t> _Retval,
    ffi.Pointer<ffi.Int8> _Dst,
    int _SizeInBytes,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Src,
    int _Size,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _wcsrtombs_s(
      _Retval,
      _Dst,
      _SizeInBytes,
      _Src,
      _Size,
      _State,
    );
  }

  late final _wcsrtombs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              size_t,
              ffi.Pointer<mbstate_t>)>>('wcsrtombs_s');
  late final _wcsrtombs_s = _wcsrtombs_sPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ffi.Pointer<wchar_t>>, int, ffi.Pointer<mbstate_t>)>();

  int wcsrtombs(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<ffi.Pointer<wchar_t>> _PSource,
    int _Count,
    ffi.Pointer<mbstate_t> _State,
  ) {
    return _wcsrtombs(
      _Dest,
      _PSource,
      _Count,
      _State,
    );
  }

  late final _wcsrtombsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              size_t,
              ffi.Pointer<mbstate_t>)>>('wcsrtombs');
  late final _wcsrtombs = _wcsrtombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          int, ffi.Pointer<mbstate_t>)>();

  int wctob(
    int _WCh,
  ) {
    return _wctob(
      _WCh,
    );
  }

  late final _wctobPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('wctob');
  late final _wctob = _wctobPtr.asFunction<int Function(int)>();

  int wmemcpy_s(
    ffi.Pointer<wchar_t> _S1,
    int _N1,
    ffi.Pointer<wchar_t> _S2,
    int _N,
  ) {
    return _wmemcpy_s(
      _S1,
      _N1,
      _S2,
      _N,
    );
  }

  late final _wmemcpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t, ffi.Pointer<wchar_t>,
              rsize_t)>>('wmemcpy_s');
  late final _wmemcpy_s = _wmemcpy_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, int)>();

  int wmemmove_s(
    ffi.Pointer<wchar_t> _S1,
    int _N1,
    ffi.Pointer<wchar_t> _S2,
    int _N,
  ) {
    return _wmemmove_s(
      _S1,
      _N1,
      _S2,
      _N,
    );
  }

  late final _wmemmove_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t, ffi.Pointer<wchar_t>,
              rsize_t)>>('wmemmove_s');
  late final _wmemmove_s = _wmemmove_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, int)>();

  /// Name:         Tolk_Load
  /// Description:  Initializes Tolk by loading and initializing the screen reader drivers and setting the current screen reader driver, provided at least one of the supported screen readers is active. Also initializes COM if it has not already been initialized on the calling thread. Calling this function more than once will only initialize COM. You should call this function before using the functions below. Use Tolk_IsLoaded to determine if Tolk has been initialized.
  /// Parameters:   None.
  /// Returns:      None.
  void Tolk_Load() {
    return _Tolk_Load();
  }

  late final _Tolk_LoadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Tolk_Load');
  late final _Tolk_Load = _Tolk_LoadPtr.asFunction<void Function()>();

  /// Name:         Tolk_IsLoaded
  /// Description:  Tests if Tolk has been initialized.
  /// Parameters:   None.
  /// Returns:      true if Tolk has been initialized, false otherwise.
  bool Tolk_IsLoaded() {
    return _Tolk_IsLoaded() != 0;
  }

  late final _Tolk_IsLoadedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Tolk_IsLoaded');
  late final _Tolk_IsLoaded = _Tolk_IsLoadedPtr.asFunction<int Function()>();

  /// Name:         Tolk_Unload
  /// Description:  Finalizes Tolk by finalizing and unloading the screen reader drivers and clearing the current screen reader driver, provided one was set. Also uninitializes COM on the calling thread. Calling this function more than once will only uninitialize COM. You should not use the functions below if this function has been called.
  /// Parameters:   None.
  /// Returns:      None.
  void Tolk_Unload() {
    return _Tolk_Unload();
  }

  late final _Tolk_UnloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Tolk_Unload');
  late final _Tolk_Unload = _Tolk_UnloadPtr.asFunction<void Function()>();

  /// Name:         Tolk_TrySAPI
  /// Description:  Sets if Microsoft Speech API (SAPI) should be used in the screen reader auto-detection process. The default is not to include SAPI. The SAPI driver will use the system default synthesizer, voice and soundcard. This function triggers the screen reader detection process if needed. For best performance, you should call this function before calling Tolk_Load.
  /// Parameters:   trySAPI: whether or not to include SAPI in auto-detection.
  /// Returns:      None.
  void Tolk_TrySAPI(
    bool trySAPI,
  ) {
    return _Tolk_TrySAPI(
      trySAPI ? 1 : 0,
    );
  }

  late final _Tolk_TrySAPIPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>('Tolk_TrySAPI');
  late final _Tolk_TrySAPI = _Tolk_TrySAPIPtr.asFunction<void Function(int)>();

  /// Name:         Tolk_PreferSAPI
  /// Description:  If auto-detection for SAPI has been turned on through Tolk_TrySAPI, sets if SAPI should be placed first (true) or last (false) in the screen reader detection list. Putting it last is the default and is good for using SAPI as a fallback option. Putting it first is good for ensuring SAPI is used even when a screen reader is running, but keep in mind screen readers will still be tried if SAPI is unavailable. This function triggers the screen reader detection process if needed. For best performance, you should call this function before calling Tolk_Load.
  /// Parameters:   preferSAPI: whether or not to prefer SAPI over screen reader drivers in auto-detection.
  /// Returns:      None.
  void Tolk_PreferSAPI(
    bool preferSAPI,
  ) {
    return _Tolk_PreferSAPI(
      preferSAPI ? 1 : 0,
    );
  }

  late final _Tolk_PreferSAPIPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'Tolk_PreferSAPI');
  late final _Tolk_PreferSAPI =
      _Tolk_PreferSAPIPtr.asFunction<void Function(int)>();

  /// Name:         Tolk_DetectScreenReader
  /// Description:  Returns the common name for the currently active screen reader driver, if one is set. If none is set, tries to detect the currently active screen reader before looking up the name. If no screen reader is active, NULL is returned. Note that the drivers hard-code the common name, it is not requested from the screen reader itself. You should call Tolk_Load once before using this function.
  /// Parameters:   None.
  /// Returns:      A Unicode string representation of the common name on success, NULL otherwise.
  ffi.Pointer<wchar_t> Tolk_DetectScreenReader() {
    return _Tolk_DetectScreenReader();
  }

  late final _Tolk_DetectScreenReaderPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wchar_t> Function()>>(
          'Tolk_DetectScreenReader');
  late final _Tolk_DetectScreenReader =
      _Tolk_DetectScreenReaderPtr.asFunction<ffi.Pointer<wchar_t> Function()>();

  /// Name:         Tolk_HasSpeech
  /// Description:  Tests if the current screen reader driver supports speech output, if one is set. If none is set, tries to detect the currently active screen reader before testing for speech support. You should call Tolk_Load once before using this function.
  /// Parameters:   None.
  /// Returns:      true if the current screen reader driver supports speech, false otherwise.
  bool Tolk_HasSpeech() {
    return _Tolk_HasSpeech() != 0;
  }

  late final _Tolk_HasSpeechPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Tolk_HasSpeech');
  late final _Tolk_HasSpeech = _Tolk_HasSpeechPtr.asFunction<int Function()>();

  /// Name:         Tolk_HasBraille
  /// Description:  Tests if the current screen reader driver supports braille output, if one is set. If none is set, tries to detect the currently active screen reader before testing for braille support. You should call Tolk_Load once before using this function.
  /// Parameters:   None.
  /// Returns:      true if the current screen reader driver supports braille, false otherwise.
  bool Tolk_HasBraille() {
    return _Tolk_HasBraille() != 0;
  }

  late final _Tolk_HasBraillePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Tolk_HasBraille');
  late final _Tolk_HasBraille =
      _Tolk_HasBraillePtr.asFunction<int Function()>();

  bool Tolk_Output(
    ffi.Pointer<wchar_t> str,
    bool interrupt,
  ) {
    return _Tolk_Output(
          str,
          interrupt ? 1 : 0,
        ) !=
        0;
  }

  late final _Tolk_OutputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<wchar_t>, ffi.Uint8)>>('Tolk_Output');
  late final _Tolk_Output =
      _Tolk_OutputPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  bool Tolk_Speak(
    ffi.Pointer<wchar_t> str,
    bool interrupt,
  ) {
    return _Tolk_Speak(
          str,
          interrupt ? 1 : 0,
        ) !=
        0;
  }

  late final _Tolk_SpeakPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<wchar_t>, ffi.Uint8)>>('Tolk_Speak');
  late final _Tolk_Speak =
      _Tolk_SpeakPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  /// Name:         Tolk_Braille
  /// Description:  Brailles text through the current screen reader driver, if one is set and supports braille output. If none is set or if it encountered an error, tries to detect the currently active screen reader before brailling the given text. Use this function only if you specifically need to braille text through the current screen reader without also speaking it. Not all screen reader drivers may support this functionality. Therefore, use Tolk_Output whenever possible. You should call Tolk_Load once before using this function.
  /// Parameters:   str: text to braille.
  /// Returns:      true on success, false otherwise.
  bool Tolk_Braille(
    ffi.Pointer<wchar_t> str,
  ) {
    return _Tolk_Braille(
          str,
        ) !=
        0;
  }

  late final _Tolk_BraillePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<wchar_t>)>>(
          'Tolk_Braille');
  late final _Tolk_Braille =
      _Tolk_BraillePtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  /// Name:         Tolk_IsSpeaking
  /// Description:  Tests if the screen reader associated with the current screen reader driver is speaking, if one is set and supports querying for status information. If none is set, tries to detect the currently active screen reader before testing if it is speaking. You should call Tolk_Load once before using this function.
  /// Parameters:   None.
  /// Returns:      true if text is being spoken by the screen reader, false otherwise.
  bool Tolk_IsSpeaking() {
    return _Tolk_IsSpeaking() != 0;
  }

  late final _Tolk_IsSpeakingPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Tolk_IsSpeaking');
  late final _Tolk_IsSpeaking =
      _Tolk_IsSpeakingPtr.asFunction<int Function()>();

  /// Name:         Tolk_Silence
  /// Description:  Silences the screen reader associated with the current screen reader driver, if one is set and supports speech output. If none is set or if it encountered an error, tries to detect the currently active screen reader before silencing it. You should call Tolk_Load once before using this function.
  /// Parameters:   None.
  /// Returns:      true on success, false otherwise.
  bool Tolk_Silence() {
    return _Tolk_Silence() != 0;
  }

  late final _Tolk_SilencePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Tolk_Silence');
  late final _Tolk_Silence = _Tolk_SilencePtr.asFunction<int Function()>();
}

typedef va_list = ffi.Pointer<ffi.Int8>;
typedef uintptr_t = ffi.Uint64;
typedef wchar_t = ffi.Uint16;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  external int _locale_mb_cur_max;

  @ffi.Uint32()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  external int _Wchar;

  @ffi.Uint16()
  external int _Byte;

  @ffi.Uint16()
  external int _State;
}

typedef errno_t = ffi.Int32;
typedef size_t = ffi.Uint64;
typedef wint_t = ffi.Uint16;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef wctype_t = ffi.Uint16;

class _wfinddata32_t extends ffi.Struct {
  @ffi.Uint32()
  external int attrib;

  @__time32_t()
  external int time_create;

  @__time32_t()
  external int time_access;

  @__time32_t()
  external int time_write;

  @_fsize_t()
  external int size;

  @ffi.Array.multi([260])
  external ffi.Array<wchar_t> name;
}

typedef __time32_t = ffi.Int64;
typedef _fsize_t = ffi.Uint64;

class _wfinddata32i64_t extends ffi.Struct {
  @ffi.Uint32()
  external int attrib;

  @__time32_t()
  external int time_create;

  @__time32_t()
  external int time_access;

  @__time32_t()
  external int time_write;

  @ffi.Int64()
  external int size;

  @ffi.Array.multi([260])
  external ffi.Array<wchar_t> name;
}

class _wfinddata64i32_t extends ffi.Struct {
  @ffi.Uint32()
  external int attrib;

  @__time64_t()
  external int time_create;

  @__time64_t()
  external int time_access;

  @__time64_t()
  external int time_write;

  @_fsize_t()
  external int size;

  @ffi.Array.multi([260])
  external ffi.Array<wchar_t> name;
}

typedef __time64_t = ffi.Int64;

class _wfinddata64_t extends ffi.Struct {
  @ffi.Uint32()
  external int attrib;

  @__time64_t()
  external int time_create;

  @__time64_t()
  external int time_access;

  @__time64_t()
  external int time_write;

  @ffi.Int64()
  external int size;

  @ffi.Array.multi([260])
  external ffi.Array<wchar_t> name;
}

class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

typedef FILE = _iobuf;
typedef rsize_t = size_t;

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;
}

class _stat32 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @_off_t()
  external int st_size;

  @__time32_t()
  external int st_atime;

  @__time32_t()
  external int st_mtime;

  @__time32_t()
  external int st_ctime;
}

typedef _dev_t = ffi.Uint32;
typedef _ino_t = ffi.Uint16;
typedef _off_t = ffi.Int64;

class _stat32i64 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @__time32_t()
  external int st_atime;

  @__time32_t()
  external int st_mtime;

  @__time32_t()
  external int st_ctime;
}

class _stat64i32 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @_off_t()
  external int st_size;

  @__time64_t()
  external int st_atime;

  @__time64_t()
  external int st_mtime;

  @__time64_t()
  external int st_ctime;
}

class _stat64 extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @ffi.Int64()
  external int st_size;

  @__time64_t()
  external int st_atime;

  @__time64_t()
  external int st_mtime;

  @__time64_t()
  external int st_ctime;
}

class stat extends ffi.Struct {
  @_dev_t()
  external int st_dev;

  @_ino_t()
  external int st_ino;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Int16()
  external int st_nlink;

  @ffi.Int16()
  external int st_uid;

  @ffi.Int16()
  external int st_gid;

  @_dev_t()
  external int st_rdev;

  @_off_t()
  external int st_size;

  @time_t()
  external int st_atime;

  @time_t()
  external int st_mtime;

  @time_t()
  external int st_ctime;
}

typedef time_t = __time64_t;
typedef mbstate_t = _Mbstatet;

const int false1 = 0;

const int true1 = 1;

const int __null = 0;

const int _WCHAR_T_DEFINED = 1;
